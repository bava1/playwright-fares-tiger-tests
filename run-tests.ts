import { exec } from 'child_process';
import { promisify } from 'util';
import { EmailService } from './reporters/email/email-service';
import { loadEmailConfig } from './reporters/email/email-config';
import path from 'path';
import fs from 'fs/promises';

const execAsync = promisify(exec);

interface ExecError extends Error {
  stdout?: string;
  stderr?: string;
  code?: number;
}

interface TestResult {
  title: string;
  status: 'passed' | 'failed' | 'skipped' | 'flaky';
  duration: number;
  error?: string;
}

function parseTestResults(output: string): TestResult[] {
  const results: TestResult[] = [];
  const lines = output.split('\n');
  
  for (const line of lines) {
    if (line.includes('‚úì') || line.includes('√ó')) {
      const status = line.includes('‚úì') ? 'passed' : 'failed';
      const title = line.split(']')[1]?.trim() || '';
      const durationMatch = line.match(/\((\d+)ms\)/);
      const duration = durationMatch ? parseInt(durationMatch[1]) : 0;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ—Å—Ç flaky (–ø—Ä–æ–≤–∞–ª–∏–ª—Å—è, –Ω–æ –∏–º–µ–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–∫–∞—Ö)
      const isFlaky = status === 'failed' && line.includes('retry');
      
      results.push({
        title,
        status: isFlaky ? 'flaky' : status,
        duration,
      });
    }
  }
  
  return results;
}

async function runTests() {
  try {
    console.log('üöÄ Starting test execution...');
    
    // Run Playwright tests
    const { stdout, stderr } = await execAsync('npx playwright test');
    console.log(stdout);
    if (stderr) console.error(stderr);

    // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
    const testResults = parseTestResults(stdout);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
    const groupedResults = testResults.reduce((acc, result) => {
      if (!acc[result.status]) {
        acc[result.status] = [];
      }
      acc[result.status].push(result);
      return acc;
    }, {} as Record<string, TestResult[]>);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –¥–ª—è parsed-log.txt
    let report = 'üìã Test Report\n';
    report += '----------------\n\n';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ flaky-—Ç–µ—Å—Ç–∞—Ö
    if (groupedResults['flaky']?.length) {
      report += '‚ö†Ô∏è Flaky Tests:\n';
      groupedResults['flaky'].forEach(test => {
        report += `- ${test.title} (${test.duration}ms)\n`;
      });
      report += '\n';
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö
    if (groupedResults['failed']?.length) {
      report += '‚ùå Failed Tests:\n';
      groupedResults['failed'].forEach(test => {
        report += `- ${test.title} (${test.duration}ms)\n`;
      });
      report += '\n';
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    report += 'üìä Test Statistics:\n';
    report += `Total Tests: ${testResults.length}\n`;
    report += `Passed: ${groupedResults['passed']?.length || 0}\n`;
    report += `Failed: ${groupedResults['failed']?.length || 0}\n`;
    report += `Flaky: ${groupedResults['flaky']?.length || 0}\n`;
    report += `Skipped: ${groupedResults['skipped']?.length || 0}\n`;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
    const parsedLogPath = path.join(process.cwd(), 'logs', 'parsed-log.txt');
    await fs.writeFile(parsedLogPath, report, 'utf-8');

    // Load email configuration
    const emailConfig = await loadEmailConfig();

    // Initialize email service
    const emailService = new EmailService(emailConfig);
    await emailService.initialize();

    // Send email with parsed log content
    const result = await emailService.sendEmail({
      html: `
        <h2>Test Report</h2>
        <p>Generated on: ${new Date().toLocaleString()}</p>
        <pre style="font-family: monospace; white-space: pre-wrap;">${report}</pre>
      `,
    });

    if (result.success) {
      console.log('‚úÖ Test results sent successfully');
    } else {
      console.error('‚ùå Failed to send test results:', result.error);
    }

    // Cleanup
    await emailService.cleanup();

  } catch (error) {
    console.error('‚ùå Error during test execution:', error);
    process.exit(1);
  }
}

async function runTestsTry() {
  try {
    console.log('üöÄ Starting test execution (TEST MODE)...');
    
    // Run Playwright tests
    let stdout = '';
    let stderr = '';
    try {
      const result = await execAsync('npx playwright test');
      stdout = result.stdout;
      stderr = result.stderr;
    } catch (error) {
      const execError = error as ExecError;
      if (execError.stdout) stdout = execError.stdout;
      if (execError.stderr) stderr = execError.stderr;
      console.log('‚ö†Ô∏è Some tests failed, but continuing to show report...');
    }

    console.log(stdout);
    if (stderr) console.error(stderr);

    // –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
    const testResults = parseTestResults(stdout);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
    const groupedResults = testResults.reduce((acc, result) => {
      if (!acc[result.status]) {
        acc[result.status] = [];
      }
      acc[result.status].push(result);
      return acc;
    }, {} as Record<string, TestResult[]>);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    let report = '\nüìã Test Report:\n';
    report += '----------------\n';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ flaky-—Ç–µ—Å—Ç–∞—Ö
    if (groupedResults['flaky']?.length) {
      report += '\n‚ö†Ô∏è Flaky Tests:\n';
      groupedResults['flaky'].forEach(test => {
        report += `- ${test.title} (${test.duration}ms)\n`;
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö
    if (groupedResults['failed']?.length) {
      report += '\n‚ùå Failed Tests:\n';
      groupedResults['failed'].forEach(test => {
        report += `- ${test.title} (${test.duration}ms)\n`;
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    report += '\nüìä Test Statistics:\n';
    report += `Total Tests: ${testResults.length}\n`;
    report += `Passed: ${groupedResults['passed']?.length || 0}\n`;
    report += `Failed: ${groupedResults['failed']?.length || 0}\n`;
    report += `Flaky: ${groupedResults['flaky']?.length || 0}\n`;
    report += `Skipped: ${groupedResults['skipped']?.length || 0}\n`;

    console.log(report);
    console.log('\n‚úÖ Test execution completed');

  } catch (error) {
    console.error('‚ùå Error during test execution:', error);
  }
}

// Run the tests
// runTests();  // Uncomment to run with email
runTestsTry();  // Run in test mode 